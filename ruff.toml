# Same as Black.
line-length = 100
indent-width = 4
target-version = "py312"

[lint]
preview = true
select = ["A", "E3", "E4", "E5", "E7", "E9", "F", "UP", "B", "S", "I", "N", "C90", "C4", "BLE"]
#select = ["ALL"]
ignore = [
    "CPY001", # Missing copyright notice at top of file
    "D105", # Missing docstring in magic method
    "D106", # Missing docstring in public nested class
    "D212", # Multi-line docstring summary should start at the first line
    "D407", # Missing dashed underline after section ("{name}")s
]

exclude = [
    "__pycache__/",
    ".venv/",
    "venv/",
    ".env/",
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"